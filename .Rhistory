sum(which(results) == "NA")
results
sum(which(results) == "NA")
sum(unique(results))
length(unique(results))
hist(results)
plot(density(results))
(density(results))
length(unique(results))
hist(results)
plot(density(results))
foo
results
quantile(results, prob = c(0.95, 0.975))
city.names <- c("Sag", "Sio", "Bat", "Mid", "Ox", "Low", "Yak", "Rich")
observed.turnout = c(17, 30, 13, 55, 26, 29, 48, 43)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
foo <- data.frame(city.names, observed.turnout)
# Turnout Function
turnout <- function() {
# Four coin flips, establishing random assignment
assignment        <- foo[sample(1:2),]
assignment[3:4,]  <- foo[sample(3:4),]
assignment[5:6,]  <- foo[sample(5:6),]
assignment[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assignment[c(1,3,5,7),]
control.group     <- assignment[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
# Iterating the Turnout Function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- turnout()
}
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
city.names <- c("Sag", "Sio", "Bat", "Mid", "Ox", "Low", "Yak", "Rich")
observed.turnout = c(17, 30, 13, 55, 26, 29, 48, 43)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
observed.diffmean
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
people_A <- c("a", "b", "c", "d", "e", "f", "j", "k")
people_B <- c("l", "m", "o", "p", "q", "r", "s", "t")
df <- data.frame(people_A, people_B)
require(dplyr)
control <- c(0, 0, 0, 0, 0, 0, 0, 0)
treatment <- c(1, 1, 1, 1, 1, 1, 1, 1)
df_con <- data.frame(people_A, control)
df_treat <- data.frame(people_B, treatment)
df_con
quantile(results, prob = c(0.95, 0.975))
foo <- read.csv("https://tinyurl.com/yxzo52ez")
foo <- read.csv("https://tinyurl.com/yxzo52ez")
foo
Y <- foo$re78 #the outcome of interest
Tr <- foo$treat #the treatment of interest
#Now With GenMatch
X <- cbind(age, educ, black, hisp, married, nodegr, re74, re75, u74, u75)
#Now With GenMatch
X <- cbind(foo$age, foo$educ, foo$black, foo$hisp, foo$married, foo$nodegr, foo$re74, foo$re75, foo$u74, foo$u75)
BalanceMat <- cbind(foo$age, I(foo$age^2), foo$educ, I(foo$educ^2), foo$black,
foo$hisp, foo$married, foo$nodegr, foo$re74 , I(foo$re74^2), foo$re75, I(foo$re75^2),
foo$u74, foo$u75, I(foo$re74*foo$re75), I(foo$age*foo$nodegr), I(foo$educ*foo$re74), I(foo$educ*75))
#Genetic Weights
gen1 <- GenMatch(Tr=Tr, X=X, BalanceMat=BalanceMat, pop.size=50,
data.type.int=FALSE, print=0, replace=FALSE)
library("rbounds")
#Genetic Weights
gen1 <- GenMatch(Tr=Tr, X=X, BalanceMat=BalanceMat, pop.size=50,
data.type.int=FALSE, print=0, replace=FALSE)
#Match
mgen1 <- Match(Y=Y, Tr=Tr, X=X, Weight.matrix=gen1, replace=FALSE)
summary(mgen1)
#Sensitivity Tests
psens(mgen1, Gamma=1.5, GammaInc=.1)
# extract relevant columns
foo2 <- foo[, c(6:8, 11:16, 99, 50, 114, 49, 52, 63, 136, 109, 126, 48, 160, 142, 10, 108)]
# remove 2 rows with missing data (there are better ways to handle missing data)
foo2 <- foo2[c(-19, -47), ]
# check that all missing data is gone...
which(is.na(foo2) == TRUE)
setwd("/Users/anggunberlian/Desktop/CS112")
library(Matching)
foo <- read.csv("peace.csv")
# extract relevant columns
foo2 <- foo[, c(6:8, 11:16, 99, 50, 114, 49, 52, 63, 136, 109, 126, 48, 160, 142, 10, 108)]
# remove 2 rows with missing data (there are better ways to handle missing data)
foo2 <- foo2[c(-19, -47), ]
# check that all missing data is gone...
which(is.na(foo2) == TRUE)
# take a peek at the data set (identify the columns)
head(foo2)
# Train the two models (without and with interaction term)
glm1 <- glm(pbs2s3 ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + untype4,
data = foo2, family = binomial)
summary(glm1)
glm.int <- glm(pbs2s3 ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + untype4 + exp*untype4 + wardur*logcost,
data = foo2, family = binomial)
summary(glm.int)
# Predictors at their means
mean.wartype <- mean(foo2$wartype)
mean.logcost <- mean(foo2$logcost)
mean.logdead <- mean(foo2$logcost)
mean.factnum <- mean(foo2$factnum)
mean.factnum2 <- mean(foo2$factnum2)
mean.trnsfcap <- mean(foo2$trnsfcap)
mean.develop <- mean(foo2$develop)
mean.exp <- mean(foo2$exp)
mean.decade <- mean(foo2$decade)
mean.treaty <- mean(foo2$treaty)
# Get logit auxiliary function
get_logit <- function(X, coef) {
logit <- coef[1] + sum(coef[2:length(coef)]*X)
return(exp(logit) / (1 + exp(logit)))
}
storage.original.treat <- rep(NA, 315)
storage.original.control <- rep(NA, 315)
# For each war duration
for (wardur in 1:315) {
# Hypothetical unit with predictors held at their means, for both
# treatment and control group, and varying wardur.
X.treat <- c(mean.wartype, mean.logcost, wardur, mean.factnum, mean.factnum2,
mean.trnsfcap, mean.develop, mean.exp, mean.decade, mean.treaty, 1)
X.control <- c(mean.wartype, mean.logcost, wardur, mean.factnum, mean.factnum2,
mean.trnsfcap, mean.develop, mean.exp, mean.decade, mean.treaty, 0)
storage.original.treat[wardur]  <- get_logit(X.treat, coef(glm1))
storage.original.control[wardur]  <- get_logit(X.control, coef(glm1))
}
# Marginal treatment effect is y_treat - y_control
original_y <- storage.original.treat - storage.original.control
# Same process, but for interaction model
storage.int.treat <- rep(NA, 315)
storage.int.control <- rep(NA, 315)
for (wardur in 1:315) {
X.treat <- c(mean.wartype, mean.logdead, wardur, mean.factnum, mean.factnum2,
mean.trnsfcap, mean.develop, mean.exp, mean.decade, mean.treaty, 1, mean.exp*1, wardur*mean.logcost)
X.control <- c(mean.wartype, mean.logdead, wardur, mean.factnum, mean.factnum2,
mean.trnsfcap, mean.develop, mean.exp, mean.decade, mean.treaty, 0, 0, wardur*mean.logcost)
storage.int.treat[wardur]  <- get_logit(X.treat, coef(glm.int))
storage.int.control[wardur]  <- get_logit(X.control, coef(glm.int))
}
int_y <- storage.int.treat - storage.int.control
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18)
lines(1:315, int_y, col = "red", ylim = c(0, 0.8), xlim = c(1, 315), pch=19)
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18)
lines(1:315, int_y, col = "red", ylim = c(0, 0.8), xlim = c(1, 315), pch=19, type="b", lty=2)
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18, type="b")
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18, type="b")
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18)
lines(1:315, int_y, col = "red", ylim = c(0, 0.8), xlim = c(1, 315), pch=19, lty=2)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend("topleft",
c("sin(x)","cos(x)"),
fill=c("blue","red")
)
legend("topright",
c("sin(x)","cos(x)"),
fill=c("black","red")
)
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18)
lines(1:315, int_y, col = "red", ylim = c(0, 0.8), xlim = c(1, 315), pch=19, lty=2)
legend("topright",
c("Original Model","Model with Interaction Term"),
fill=c("black","red")
)
plot(1:315, original_y, type = "l", ylim = c(0, 0.8), xlim = c(1, 315), xlab = "War Duration in Months",
ylab = "Marginal effects of UN peacekeeping operations", pch=18)
lines(1:315, int_y, col = "red", ylim = c(0, 0.8), xlim = c(1, 315), pch=19, lty=2)
legend("topright",
c("Original Model","Model with Interaction Terms"),
fill=c("black","red")
)
X = cbind(glm5$fitted.values, foo4$wartype, foo4$logcost, foo4$wardur, foo4$factnum,
foo4$factnum2, foo4$trnsfcap, foo4$develop, foo4$exp, foo4$decade, foo4$treaty)
################
#  QUESTION 3  #
################
Tr <- rep(0, length(foo$uncint))
################
#  QUESTION 3  #
################
Tr <- rep(0, length(foo$uncint))
Tr[which(foo$uncint != "None")] <- 1
Tr
################
#  QUESTION 4  #
################
foo <- read.csv("peace.csv")
# extract relevant columns
foo4 <- foo[, c(6:8, 11:16, 34:35, 99, 50, 52, 114, 49, 63, 136, 109, 126, 48, 160, 142, 10)]
# remove rows with missing data
foo4 <- foo4[c(-4, -16, -19, -47, -84, -93, -98), ]
# check that all missing data is gone...
which(is.na(foo4) == TRUE)
# take a peek at the data set (identify the columns)
head(foo4)
# simple regression
# change pbs2l and pbs5l into binary
foo4$pbs2l <- ifelse(foo4$pbs2l == 'Success', 1,0)
foo4$pbs5l <- ifelse(foo4$pbs5l == 'Success', 1,0)
Tr <- rep(0, length(foo4$uncint))
Tr[which(foo4$uncint != "None" & foo4$uncint != "Mediation")] <- 1
foo4$Tr <- Tr
# Balance before matching (for the logistic regression model)
mb1 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, nboots=500)
# TWo years
glm3 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4, family = binomial)
summary(glm3)
# Five years
summary(foo4$pbs5l)      # Check for NAs
NAs <- is.na(foo4$pbs5l) # NA indices
glm4 <- glm(pbs5l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4[!NAs,], family = binomial)
summary(glm4)
# Two years
foo.counter_factual <- foo4
foo.counter_factual$Tr <- rep(1, nrow(foo4)) - foo4$Tr
counter.factuals <- predict(glm3, newdata=foo.counter_factual, type="response")
unit_treat_effects <- rep(NA, nrow(foo4))
mask <- foo4$Tr == 1
unit_treat_effects[mask] <- glm3$fitted.values[mask] - counter.factuals[mask]
unit_treat_effects[!mask] <- counter.factuals[!mask] - glm3$fitted.values[!mask]
mean(unit_treat_effects)
# Five years
foo.counter_factual <- foo4[!NAs,]
foo.counter_factual$Tr <- 1 - foo4$Tr[!NAs]
counter.factuals <- predict(glm4, newdata=foo.counter_factual, type="response")
unit_treat_effects <- rep(NA, nrow(foo4[!NAs,]))
mask <- foo4[!NAs,]$Tr == 1
unit_treat_effects[mask] <- glm4$fitted.values[mask] - counter.factuals[mask]
unit_treat_effects[!mask] <- counter.factuals[!mask] - glm4$fitted.values[!mask]
mean(unit_treat_effects)
glm5 <- glm(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, family = binomial)
summary(glm5)
X <- glm5$fitted.values
Y1 <- foo4$pbs2l
Y2 <- foo4$pbs5l
m1  <- Match(Y=Y1, Tr=Tr, X=X, M=1, BiasAdjust = T)
summary(m1)
mb2 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m1, nboots=500)
mask <- which(!is.na(Y2))
m2  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask], M=1, BiasAdjust = T)
summary(m2)
mb3 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m2, nboots=500)
X = cbind(glm5$fitted.values, foo4$wartype, foo4$logcost, foo4$wardur, foo4$factnum,
foo4$factnum2, foo4$trnsfcap, foo4$develop, foo4$exp, foo4$decade, foo4$treaty)
genout <- GenMatch(Tr=Tr, X=X, M=1,
pop.size=200, max.generations=10, wait.generations=25)
m3  <- Match(Y=Y1, Tr=Tr, X=X, M=1, BiasAdjust = T, Weight.matrix = genout)
summary(m3)
?GenMatch
# Balance before matching (for the logistic regression model)
mb1 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, nboots=500)
# TWo years
glm3 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4, family = binomial)
summary(glm3)
# Two years
foo.counter_factual <- foo4
foo.counter_factual$Tr <- rep(1, nrow(foo4)) - foo4$Tr
counter.factuals <- predict(glm3, newdata=foo.counter_factual, type="response")
unit_treat_effects <- rep(NA, nrow(foo4))
mask <- foo4$Tr == 1
unit_treat_effects[mask] <- glm3$fitted.values[mask] - counter.factuals[mask]
unit_treat_effects[!mask] <- counter.factuals[!mask] - glm3$fitted.values[!mask]
mean(unit_treat_effects)
foo.counter_factual
glm3$fitted.values[mask]
counter.factuals[mask]
# Two years
summary(glm3)
foo.counter_factual[0]
foo.counter_factual
foo.counter_factual[[0]]
foo.counter_factual[0]
tolist(foo.counter_factual[0])
tolist(foo.counter_factual[0])
list(foo.counter_factual[0])
foo.counter_factual[0]
foo.counter_factual
counter.factuals <- predict(glm3, newdata=foo.counter_factual, type="response")
fitted.values <- predict(glm3, newdata = foo4, type = "response")
fitted.values - counter.factuals
glm3$coefficients
foo4[1]
foo4[[1]]
foo4
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
c(1, 1, 1) * c(2, 2, 2)
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
c(glm3$coefficients)* c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1)
sum(glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 1))
sum(glm3$coefficients * c(1, 1, 14.917451, 72, 4, 16, 5.7355452, 132.84660, 0.12172771, 5, 0, 0))
unit_treat_effects[1]
glm3$fitted.values[1]
# TWo years
glm3 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4, family = binomial)
glm3$fitted.values[1]
glm3$fitted.values
unit_treat_effects
hist(unit_treat_effects)
std(unit_treat_effects)
std.error(unit_treat_effects) # st error of dataset
std(unit_treat_effects) # st error of dataset
sd(unit_treat_effects)
################
#  QUESTION 4  #
################
foo <- read.csv("peace.csv")
# extract relevant columns
foo4 <- foo[, c(6:8, 11:16, 34:35, 99, 50, 52, 114, 49, 63, 136, 109, 126, 48, 160, 142, 10)]
# remove rows with missing data
foo4 <- foo4[c(-4, -16, -19, -47, -84, -93, -98), ]
# check that all missing data is gone...
which(is.na(foo4) == TRUE)
# take a peek at the data set (identify the columns)
head(foo4)
# simple regression
# change pbs2l and pbs5l into binary
foo4$pbs2l <- ifelse(foo4$pbs2l == 'Success', 1,0)
foo4$pbs5l <- ifelse(foo4$pbs5l == 'Success', 1,0)
Tr <- rep(0, length(foo4$uncint))
Tr[which(foo4$uncint != "None" & foo4$uncint != "Mediation")] <- 1
foo4$Tr <- Tr
# Balance before matching (for the logistic regression model)
mb1 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, nboots=500)
# TWo years
glm3 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4, family = binomial)
summary(glm3)
# Five years
summary(foo4$pbs5l)      # Check for NAs
NAs <- is.na(foo4$pbs5l) # NA indices
# Five years
glm4 <- glm(pbs5l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4[!NAs,], family = binomial)
summary(glm4)
# Two years
foo.counter_factual <- foo4
foo.counter_factual$Tr <- rep(1, nrow(foo4)) - foo4$Tr
counter.factuals <- predict(glm3, newdata=foo.counter_factual, type="response")
fitted.values <- predict(glm3, newdata = foo4, type = "response")
unit_treat_effects <- rep(NA, nrow(foo4))
mask <- foo4$Tr == 1
unit_treat_effects[mask] <- glm3$fitted.values[mask] - counter.factuals[mask]
unit_treat_effects[!mask] <- counter.factuals[!mask] - glm3$fitted.values[!mask]
mean(unit_treat_effects)
sd(unit_treat_effects)
# Five years
foo.counter_factual <- foo4[!NAs,]
foo.counter_factual$Tr <- 1 - foo4$Tr[!NAs]
counter.factuals <- predict(glm4, newdata=foo.counter_factual, type="response")
unit_treat_effects <- rep(NA, nrow(foo4[!NAs,]))
mask <- foo4[!NAs,]$Tr == 1
unit_treat_effects[mask] <- glm4$fitted.values[mask] - counter.factuals[mask]
unit_treat_effects[!mask] <- counter.factuals[!mask] - glm4$fitted.values[!mask]
mean(unit_treat_effects)
sd(unit_treat_effects)
glm5 <- glm(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, family = binomial)
summary(glm5)
X <- glm5$fitted.values
Y1 <- foo4$pbs2l
Y2 <- foo4$pbs5l
m1  <- Match(Y=Y1, Tr=Tr, X=X, M=1, BiasAdjust = T)
summary(m1)
mb2 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m1, nboots=500)
mask <- which(!is.na(Y2))
m2  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask], M=1, BiasAdjust = T)
summary(m2)
mb3 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m2, nboots=500)
X = cbind(foo4$wartype, foo4$logcost, foo4$wardur, foo4$factnum,
foo4$factnum2, foo4$trnsfcap, foo4$develop, foo4$exp, foo4$decade, foo4$treaty)
Y1 <- foo4$pbs2l
Y2 <- foo4$pbs5l
Tr <- foo4$Tr
?GenMatch
genout <- GenMatch(Tr=Tr, X=X, M=1,
pop.size=200, max.generations=10, wait.generations=25)
m3  <- Match(Y=Y1, Tr=Tr, X=X, M=1, BiasAdjust = T, Weight.matrix = genout)
summary(m3)
m3$est.noadj
mb4 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m3, nboots=500)
genout1 <- GenMatch(Tr=Tr[mask], X=X[mask,], M=1,
pop.size=200, max.generations=10, wait.generations=25)
m4  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask,], M=1, BiasAdjust = T, Weight.matrix = genout1)
summary(m4)
genout1 <- GenMatch(Tr=Tr, X=X, M=1,
pop.size=200, max.generations=10, wait.generations=25)
m4  <- Match(Y=Y2, Tr=Tr, X=X, M=1, BiasAdjust = T, Weight.matrix = genout1)
genout1 <- GenMatch(Tr=Tr, X=X, M=1,
pop.size=200, max.generations=10, wait.generations=25)
m4  <- Match(Y=Y2, Tr=Tr, X=X, M=1, BiasAdjust = T, Weight.matrix = genout1)
summary(m4)
sum(is.na(Y2))
genout1 <- GenMatch(Tr=Tr[mask], X=X[mask,], M=1,
pop.size=200, max.generations=10, wait.generations=25)
m4  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask,], M=1, BiasAdjust = T, Weight.matrix = genout1)
summary(m4)
genout1 <- GenMatch(Tr=Tr[mask], X=X[mask,], M=1,
pop.size=200, max.generations=10, wait.generations=25)
m4  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask,], M=1, BiasAdjust = T, Weight.matrix = genout1)
summary(m4)
Tr
X
X
summary(m4)
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo,
match.out = m3, nboots=500)
mb5
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo,
match.out = m3, nboots=500)
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m3, nboots=500)
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m3, nboots=1000)
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m3, nboots=1000)
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m4, nboots=1000)
summary(m4)
m4$est.noadj
m4  <- Match(Y=Y2[mask], Tr=Tr[mask], X=X[mask,], M=1, Weight.matrix = genout1)
summary(m4)
m4$est.noadj
mb5 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4,
match.out = m4, nboots=1000)
glm5 <- glm(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, family = binomial)
glm5 <- glm(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, family = binomial)
# take a peek at the data set (identify the columns)
head(foo4)
glm5 <- glm(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, family = binomial)
################
#  QUESTION 4  #
################
foo <- read.csv("peace.csv")
# extract relevant columns
foo4 <- foo[, c(6:8, 11:16, 34:35, 99, 50, 52, 114, 49, 63, 136, 109, 126, 48, 160, 142, 10)]
# remove rows with missing data
foo4 <- foo4[c(-4, -16, -19, -47, -84, -93, -98), ]
# check that all missing data is gone...
which(is.na(foo4) == TRUE)
# take a peek at the data set (identify the columns)
head(foo4)
# simple regression
# change pbs2l and pbs5l into binary
foo4$pbs2l <- ifelse(foo4$pbs2l == 'Success', 1,0)
foo4$pbs5l <- ifelse(foo4$pbs5l == 'Success', 1,0)
Tr <- rep(0, length(foo4$uncint))
Tr[which(foo4$uncint != "None" & foo4$uncint != "Mediation")] <- 1
foo4$Tr <- Tr
# Balance before matching (for the logistic regression model)
mb1 <- MatchBalance(Tr ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty, data = foo4, nboots=500)
# Two years
glm3 <- glm(pbs2l ~ wartype + logcost + wardur + factnum + factnum2 +
trnsfcap + develop + exp + decade + treaty + Tr,
data = foo4, family = binomial)
